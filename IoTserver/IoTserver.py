# ECE 544: Trustowrhty Computing - Final Project
# Creators: Nick DiMartino and Paul Joseph
# Topic: Internet of Things (IoT)
# Description of Code: Validates the session ticket and forwards the command from the client to the IoT device

import os
import socket
import json
import DES
import base64
from datetime import datetime
import dotenv

# Read and load the key-value pairs along with the names of the HOST, PORT, and IOT communcation
dotenv.load_dotenv()
HOST = '0.0.0.0'
PORT = 8080
IOT = 8082


# IoT key and AS
IOTKEY = base64.b64decode(os.getenv("IOTKEY"))
authenticator_set = set()


# Validates the ticket generated by the AS
def validate_ticket(data):
    data_dict = json.loads(data)                                                     # loads the JSON data for the ticket
    ticket = DES.decrypt(IOTKEY[:8], base64.b64decode(data_dict["ticket"]))          # decrypts the data
    ticket_dict = json.loads(ticket)                                                 # load the decrpyted ticket
    try:
        sessionkey = base64.b64decode(ticket_dict["sessionkey"])
        authenticator = json.loads(
            DES.decrypt(sessionkey[16:24], base64.b64decode(data_dict["authenticator"])).decode())
    except:
        return None
    timestamp = datetime.strptime(authenticator["timestamp"], '%Y-%m-%d %H:%M:%S.%f')    # timestamp for the authenticator
    lifetime = datetime.strptime(ticket_dict["lifetime"], '%Y-%m-%d %H:%M:%S.%f')        # lifetime of the generated ticket

    # lifetime of the ticket must be valid to be authenticated
    if authenticator["logout"] == "True":
        authenticator_set.clear()
        print("authenticator_list:\n",authenticator_set)
        return "Successfully logged out from IoT.","logout"
    if datetime.now() > lifetime:
        authenticator_set.clear()
        return "expired"
    if authenticator["username"] != ticket_dict["username"]:
        return None
    if data_dict["server"] != ticket_dict["server"]:
        return None
    if (authenticator["username"], timestamp) in authenticator_set:
        return None
    authenticator_set.add((authenticator["username"], timestamp))
    print("authenticator_list:\n",authenticator_set)
    return data_dict["command"]


# Connect the the IoT device
def iot_device_connect(response):
    serverAddressPort = ("127.0.0.1", IOT)
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
        s.sendto(response.encode(), serverAddressPort)
        msgFromServer = s.recvfrom(1024)

    return msgFromServer[0]


# Create the network communicatioon over the HOST and PORT for to connect with the Client and IoT Device
with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
    s.bind((HOST, PORT))

    while True:
        bytesAddressPair = s.recvfrom(1024)
        data = bytesAddressPair[0]

        address = bytesAddressPair[1]

        response = validate_ticket(data.decode())
        if not data:
            break

        if response is None:
            s.sendto(b'invalid session!', address)
        elif response == "expired":
            s.sendto(b'expired', address)
        elif response[1] == "logout":
            s.sendto(response[0].encode(), address)
        else:
            s.sendto(iot_device_connect(response), address)
